<?php

namespace Cke5\Utils;

use Exception;
use rex;
use rex_path;
use rex_file;
use rex_logger;
use rex_sql;
use Cke5\Handler\Cke5DatabaseHandler;

class Cke5CssHandler
{
    const CSS_OUTPUT_FILE = 'autogenerated-custom-style.css';
    const CSS_OUTPUT_DIR = 'addons/cke5_custom_data/';

    /**
     * Regeneriert die CSS-Datei mit allen benutzerdefinierten CSS-Definitionen
     * @return bool Erfolg
     */
    public static function regenerateCssFile(): bool
    {
        try {
            // Stelle sicher, dass das Verzeichnis existiert
            $outputDir = rex_path::assets(self::CSS_OUTPUT_DIR);
            if (!is_dir($outputDir)) {
                if (!mkdir($outputDir, 0775, true)) {
                    throw new Exception("Konnte Verzeichnis nicht erstellen: $outputDir");
                }
            }

            // Hole alle CSS-Definitionen aus der Datenbank
            $sqlStyles = rex_sql::factory();
            $styleResults = $sqlStyles->getArray(
                "SELECT name, element, classes, css_definition FROM " . rex::getTable(Cke5DatabaseHandler::CKE5_STYLES) .
                " WHERE css_definition != '' ORDER BY name"
            );

            // Hole auch alle CSS-Definitionen aus den Style-Gruppen
            $sqlGroups = rex_sql::factory();
            $groupResults = $sqlGroups->getArray(
                "SELECT name, css_definition FROM " . rex::getTable(Cke5DatabaseHandler::CKE5_STYLE_GROUPS) .
                " WHERE css_definition != '' ORDER BY name"
            );

            // Hole auch alle CSS-Definitionen aus Templates
            $sqlTemplates = rex_sql::factory();
            $templateResults = $sqlTemplates->getArray(
                "SELECT title, css_definition FROM " . rex::getTable(Cke5DatabaseHandler::CKE5_TEMPLATES) .
                " WHERE css_definition != '' ORDER BY title"
            );

            // Erstelle den CSS-Inhalt
            $cssContent = "/**\n * Auto-generierte CKEditor 5 Styles für das Backend\n * Generiert am: " . date('Y-m-d H:i:s') . "\n */\n\n";

            // Füge Styles hinzu
            if (count($styleResults) > 0) {
                $cssContent .= "/* Custom Styles */\n";
                foreach ($styleResults as $style) {
                    $cssContent .= "/* Style: {$style['name']} */\n";

                    // Füge auch automatisch generierte CSS für die definierten Klassen hinzu
                    if (!empty($style['element']) && !empty($style['classes'])) {
                        $classes = explode(',', $style['classes']);
                        foreach ($classes as $class) {
                            $class = trim($class);
                            if (!empty($class)) {
                                $cssContent .= "/* Auto-generierte Beispielanzeige */\n";
                                $cssContent .= "{$style['element']}.{$class} { /* Beispiel-Selektor */ }\n";
                            }
                        }
                    }

                    // Füge die benutzerdefinierte CSS-Definition hinzu
                    $cssContent .= $style['css_definition'] . "\n\n";
                }
            }

            // Füge Style-Gruppen hinzu
            if (count($groupResults) > 0) {
                $cssContent .= "/* Style Groups */\n";
                foreach ($groupResults as $group) {
                    $cssContent .= "/* Style Group: {$group['name']} */\n";
                    $cssContent .= $group['css_definition'] . "\n\n";
                }
            }

            // Füge Template-Styles hinzu
            if (count($templateResults) > 0) {
                $cssContent .= "/* Template Styles */\n";
                foreach ($templateResults as $template) {
                    $cssContent .= "/* Template: {$template['title']} */\n";
                    $cssContent .= $template['css_definition'] . "\n\n";
                }
            }

            // Schreibe die Datei
            $outputFile = $outputDir . self::CSS_OUTPUT_FILE;
            if (!rex_file::put($outputFile, $cssContent)) {
                throw new Exception("Konnte CSS-Datei nicht schreiben: $outputFile");
            }

            return true;
        } catch (Exception $e) {
            rex_logger::logException($e);
            return false;
        }
    }

    /**
     * Lädt externe CSS-Dateien und gibt sie als Array zurück
     * @return array
     */
    public static function getExternalCssFiles(): array
    {
        try {
            $files = [];

            // Hole alle CSS-Pfade aus der Datenbank
            $sqlStyles = rex_sql::factory();
            $styleResults = $sqlStyles->getArray(
                "SELECT css_path FROM " . rex::getTable(Cke5DatabaseHandler::CKE5_STYLES) .
                " WHERE css_path != ''"
            );

            // Hole alle CSS-Pfade aus Style-Gruppen
            $sqlGroups = rex_sql::factory();
            $groupResults = $sqlGroups->getArray(
                "SELECT css_path FROM " . rex::getTable(Cke5DatabaseHandler::CKE5_STYLE_GROUPS) .
                " WHERE css_path != ''"
            );

            // Hole auch alle CSS-Pfade aus Templates
            $sqlTemplates = rex_sql::factory();
            $templateResults = $sqlTemplates->getArray(
                "SELECT css_path FROM " . rex::getTable(Cke5DatabaseHandler::CKE5_TEMPLATES) .
                " WHERE css_path != ''"
            );

            // Sammle die Pfade
            foreach ($styleResults as $style) {
                if (!empty($style['css_path']) && !in_array($style['css_path'], $files)) {
                    $files[] = $style['css_path'];
                }
            }

            foreach ($groupResults as $group) {
                if (!empty($group['css_path']) && !in_array($group['css_path'], $files)) {
                    $files[] = $group['css_path'];
                }
            }

            foreach ($templateResults as $template) {
                if (!empty($template['css_path']) && !in_array($template['css_path'], $files)) {
                    $files[] = $template['css_path'];
                }
            }

            return $files;
        } catch (Exception $e) {
            rex_logger::logException($e);
            return [];
        }
    }
}